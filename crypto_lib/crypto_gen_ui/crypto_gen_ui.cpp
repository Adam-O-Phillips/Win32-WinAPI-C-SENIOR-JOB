// crypto_gen_ui.cpp : Defines the entry point for the application.
//

#include "framework.h"
#include "crypto_gen_ui.h"
#include "stdint.h"
#include "..\\crypto_lib\crypto.h"

#if defined _DEBUG
#pragma comment(lib, "..\\Debug\\crypto_lib")
#else
#pragma comment(lib, "..\\Release\\crypto_lib")
#endif

#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;                                // current instance
WCHAR szTitle[MAX_LOADSTRING];                  // The title bar text
WCHAR szWindowClass[MAX_LOADSTRING];            // the main window class name

// Forward declarations of functions included in this code module:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: Place code here.

    // Initialize global strings
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_CRYPTOGENUI, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // Perform application initialization:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_CRYPTOGENUI));

    MSG msg;

    // Main message loop:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_CRYPTOGENUI));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_CRYPTOGENUI);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//

#define IDC_GENERATE_BUTTON		0x2221
#define IDC_CHECK_BUTTON		0x2222
#define IDC_REQUEST_EDIT		0x2223
#define IDC_ACTIVATION_EDIT		0x2224

HWND ghGenBtn = NULL, ghCheckBtn = NULL;
HWND ghReqEdit = NULL, ghActiEdit = NULL;

BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // Store instance handle in our global variable

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW & ~WS_THICKFRAME,
      CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   SetWindowPos(hWnd, NULL, 0, 0, 600, 400, SWP_NOMOVE | SWP_SHOWWINDOW);
   RECT rc = {0, };
   GetClientRect(hWnd, &rc);

   int ox = rc.left, oy = rc.top, cx = rc.right - rc.left, cy = rc.bottom - rc.top;

   ghGenBtn = CreateWindow(_T("Button"), _T("Generate"), WS_CHILD | WS_VISIBLE | WS_BORDER, 10, 10, (cx - 30) / 2, 24, hWnd, (HMENU)IDC_GENERATE_BUTTON, hInstance, NULL);
   ghCheckBtn = CreateWindow(_T("Button"), _T("Check"), WS_CHILD | WS_VISIBLE | WS_BORDER, 10 + (cx - 30) / 2 + 10, 10, (cx - 30) / 2, 24, hWnd, (HMENU)IDC_CHECK_BUTTON, hInstance, NULL);

   ghReqEdit = CreateWindow(_T("Edit"), _T(""), WS_CHILD | WS_VISIBLE | WS_BORDER | ES_CENTER, 10, 44, cx - 20, 24, hWnd, (HMENU)IDC_REQUEST_EDIT, hInstance, NULL);
   ghActiEdit = CreateWindow(_T("Edit"), _T(""), WS_CHILD | WS_VISIBLE | WS_BORDER | ES_LEFT | ES_MULTILINE | ES_WANTRETURN, 10, 78, cx - 20, cy - 10 - 78, hWnd, (HMENU)IDC_ACTIVATION_EDIT, hInstance, NULL);

   return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE: Processes messages for the main window.
//
//  WM_COMMAND  - process the application menu
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
//
//


uint8_t sk_blob[1172] = {
	0x07, 0x02, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x52, 0x53, 0x41, 0x32, 0x00, 0x08, 0x00, 0x00,
	0x01, 0x00, 0x01, 0x00, 0x79, 0x76, 0x68, 0xBD, 0x8A, 0x74, 0xA9, 0x59, 0x87, 0x9E, 0x4E, 0xCE,
	0xFD, 0xA7, 0x1E, 0x40, 0xBF, 0x41, 0xE3, 0x87, 0x1F, 0xB0, 0x9D, 0xDB, 0x80, 0xC4, 0xBA, 0x34,
	0x58, 0x41, 0xAC, 0xD6, 0x2C, 0xD9, 0x0A, 0x00, 0xB4, 0x83, 0x5E, 0x83, 0x6A, 0x00, 0x6C, 0x70,
	0x28, 0x6F, 0x93, 0xF6, 0x93, 0xEB, 0x6F, 0x00, 0xA3, 0xC1, 0x0F, 0xCA, 0x8C, 0x20, 0x18, 0xCF,
	0xF4, 0x62, 0x59, 0x9C, 0xE0, 0x02, 0xAB, 0x7F, 0xB4, 0xA2, 0x33, 0x88, 0x63, 0x28, 0x93, 0x07,
	0x65, 0x73, 0x6D, 0xA1, 0x96, 0x81, 0x4D, 0x18, 0xC6, 0xFA, 0x68, 0x1B, 0x44, 0xE5, 0x38, 0x51,
	0x0C, 0xEE, 0x38, 0xB7, 0x20, 0x78, 0x1E, 0x1A, 0xD1, 0x9F, 0x21, 0x8D, 0xB1, 0xEA, 0xB2, 0x7D,
	0xAD, 0x3C, 0x08, 0x23, 0x45, 0x89, 0x89, 0x29, 0x83, 0x69, 0xAD, 0xE4, 0x24, 0x84, 0x28, 0xAD,
	0x16, 0xDF, 0x5B, 0x99, 0xCC, 0x39, 0xFD, 0x51, 0xF3, 0xE4, 0xA1, 0x24, 0xE1, 0xB0, 0x7C, 0xFB,
	0x82, 0x36, 0x8B, 0x64, 0x2A, 0xE5, 0x64, 0xE3, 0x1F, 0x3A, 0x1F, 0xB2, 0x43, 0x33, 0x1D, 0xF2,
	0x84, 0x71, 0x83, 0xED, 0xF0, 0x5C, 0xBB, 0xF8, 0x6E, 0xF5, 0xB9, 0x51, 0x43, 0xA1, 0xC0, 0xCD,
	0xB2, 0x6D, 0x0F, 0xCD, 0x4C, 0x08, 0x92, 0xC7, 0xE3, 0xFA, 0x82, 0x1D, 0x90, 0x8D, 0x89, 0xBF,
	0x03, 0x4A, 0xED, 0xFE, 0x94, 0xE3, 0x64, 0x35, 0x4E, 0xA8, 0xCC, 0x44, 0x39, 0x98, 0xB4, 0x29,
	0x36, 0xA8, 0xED, 0x9A, 0x4C, 0x1B, 0x36, 0xBD, 0xB8, 0x6E, 0x73, 0x02, 0xFA, 0x50, 0xB4, 0x55,
	0x4F, 0x0D, 0x41, 0x04, 0xB1, 0xAF, 0xFD, 0xBD, 0x70, 0x0C, 0x1E, 0x13, 0x50, 0x47, 0x5C, 0x43,
	0x18, 0x85, 0xB0, 0xFF, 0x10, 0x40, 0xEF, 0x66, 0x62, 0x7B, 0xDD, 0x9D, 0x28, 0x1C, 0x63, 0xE5,
	0x43, 0x13, 0x0D, 0xF5, 0x2B, 0xD0, 0x0D, 0xD9, 0x78, 0x05, 0x86, 0xA5, 0x7E, 0xB7, 0x4C, 0xF7,
	0xB7, 0x12, 0x70, 0x5C, 0xCE, 0xB5, 0xF9, 0x32, 0xF5, 0xAF, 0xB0, 0x61, 0xF2, 0xA3, 0x76, 0xEF,
	0xB5, 0xBA, 0x5A, 0xC0, 0xA9, 0x23, 0x77, 0xBA, 0xBD, 0x0D, 0xE5, 0xE6, 0xA1, 0xD7, 0x74, 0x85,
	0xED, 0x3C, 0xB3, 0xB7, 0x32, 0xD6, 0x1D, 0x5F, 0x25, 0xC8, 0x5C, 0x0E, 0x84, 0xB3, 0xE5, 0x90,
	0xB7, 0x1C, 0x32, 0xCC, 0xB8, 0x44, 0xCA, 0xF3, 0xAB, 0x13, 0xC7, 0x31, 0xB1, 0x94, 0x03, 0x94,
	0xCF, 0xBA, 0xA9, 0x77, 0x3F, 0x24, 0x71, 0x2D, 0xAE, 0xC1, 0x69, 0x27, 0xB0, 0x2D, 0x70, 0x05,
	0x3E, 0x7B, 0x77, 0xB0, 0x16, 0x52, 0x1B, 0xB2, 0xFE, 0x46, 0x29, 0xB6, 0x89, 0x1F, 0x3E, 0x20,
	0x37, 0x93, 0x4F, 0xDD, 0x39, 0x44, 0x74, 0x41, 0xD2, 0x4B, 0x68, 0xC7, 0x30, 0xC0, 0x7B, 0xE8,
	0x53, 0x32, 0x21, 0xF7, 0xEB, 0x9D, 0x30, 0x77, 0xE9, 0x34, 0x9A, 0xC7, 0x23, 0xA0, 0xF5, 0x7C,
	0x52, 0x46, 0xF1, 0x1C, 0xD0, 0x2B, 0x5A, 0xED, 0x24, 0xFE, 0xE8, 0xD5, 0x7D, 0x25, 0x6D, 0x95,
	0x76, 0x42, 0xEC, 0xBE, 0xEA, 0xF1, 0x74, 0xD7, 0x1F, 0xBC, 0xA7, 0xBE, 0x13, 0x7D, 0x8E, 0xC5,
	0x02, 0x3D, 0xAC, 0x4F, 0x20, 0x5F, 0xD1, 0x4C, 0xB0, 0x09, 0x8C, 0xFA, 0x3C, 0xD3, 0xB9, 0xD6,
	0x40, 0x9D, 0xDB, 0xF4, 0x7B, 0xF8, 0x54, 0x5F, 0x75, 0x61, 0x7A, 0x57, 0x7F, 0xCC, 0x88, 0x18,
	0x5C, 0x16, 0xDD, 0xAE, 0x81, 0xFE, 0xC1, 0x2E, 0x75, 0xEF, 0x69, 0x42, 0xB0, 0x97, 0x72, 0xB1,
	0x28, 0xD9, 0x74, 0x47, 0xE6, 0xF3, 0xC6, 0x04, 0xD6, 0x4C, 0x61, 0x00, 0xCB, 0x0A, 0xFD, 0xB4,
	0x02, 0x57, 0x3C, 0x72, 0x91, 0x6D, 0xB9, 0x14, 0x95, 0x55, 0xFC, 0x58, 0xEE, 0x4B, 0xF9, 0x7E,
	0x6D, 0xC7, 0xD8, 0xFD, 0xFF, 0xCE, 0x3E, 0x1B, 0x14, 0x45, 0x0A, 0x19, 0x66, 0xEA, 0x1C, 0x68,
	0xF7, 0xED, 0x82, 0x23, 0x38, 0x0E, 0x8E, 0x3C, 0x04, 0xBB, 0x99, 0x37, 0x99, 0x95, 0xBB, 0x03,
	0xC1, 0x45, 0x73, 0xC7, 0x7A, 0xE1, 0xFA, 0xD9, 0x21, 0x3A, 0xEC, 0xFD, 0x40, 0xB5, 0x02, 0x22,
	0x32, 0xAB, 0x30, 0xCF, 0x84, 0xA5, 0xF6, 0x7A, 0x8F, 0x31, 0x49, 0x4A, 0x63, 0xB9, 0x21, 0xFE,
	0x0A, 0xF5, 0x4B, 0xE0, 0xA9, 0x8D, 0xCF, 0xD4, 0x18, 0xA9, 0x28, 0xEC, 0x9A, 0x60, 0x7E, 0x63,
	0xFD, 0x1F, 0xE4, 0x84, 0xA7, 0x76, 0x3D, 0x50, 0xB3, 0xBC, 0x7D, 0x67, 0xEB, 0xED, 0xCB, 0x5E,
	0x7A, 0x5E, 0xC1, 0xBF, 0x8F, 0xE9, 0x3A, 0xEA, 0xD1, 0xA7, 0x89, 0x57, 0xED, 0xFC, 0x93, 0xEF,
	0x19, 0x06, 0xE0, 0x84, 0xFF, 0xC9, 0xF6, 0x3F, 0x93, 0x3C, 0x50, 0xC4, 0x02, 0xEA, 0xE0, 0xE5,
	0xE5, 0xED, 0x2E, 0x02, 0xE3, 0x85, 0xBE, 0x03, 0x0F, 0x72, 0x9C, 0xC0, 0xDC, 0xD2, 0x3B, 0x8B,
	0xE4, 0xA1, 0x36, 0xFB, 0xD8, 0x92, 0xA4, 0xE6, 0xAE, 0xF1, 0xD8, 0xFC, 0x5F, 0xBB, 0xD9, 0x77,
	0xAB, 0x17, 0x04, 0x95, 0x50, 0x87, 0x0B, 0x64, 0x12, 0xE8, 0x25, 0x2D, 0xA6, 0x32, 0x93, 0xD6,
	0xD6, 0xF4, 0x3D, 0xEF, 0xC9, 0x57, 0x67, 0xEE, 0xB4, 0x28, 0x96, 0x02, 0xA8, 0x89, 0x75, 0x93,
	0x84, 0xE5, 0x02, 0x55, 0x79, 0xCA, 0x18, 0x3A, 0x83, 0xE2, 0xC4, 0xE1, 0xF4, 0x77, 0x42, 0xD3,
	0x01, 0x10, 0x5F, 0x3F, 0x31, 0xA7, 0x03, 0x75, 0x9E, 0xC8, 0x9E, 0x50, 0xFF, 0xF7, 0x4B, 0x01,
	0x5D, 0x16, 0x4E, 0x7A, 0x3B, 0xCE, 0x25, 0x50, 0xC8, 0xF7, 0xD2, 0x0C, 0x26, 0x1F, 0xDC, 0x4A,
	0x66, 0xCB, 0x38, 0x0D, 0xF9, 0xCA, 0x3C, 0x4C, 0xC7, 0xE5, 0xF9, 0x89, 0x89, 0xB2, 0x65, 0x5B,
	0x78, 0x88, 0x9E, 0x6D, 0xFB, 0xB4, 0x83, 0xB3, 0x78, 0x62, 0x20, 0xFF, 0xC8, 0x29, 0xAF, 0x9C,
	0x57, 0x0C, 0x90, 0xD8, 0x0B, 0x5E, 0xC7, 0xBE, 0x6F, 0xB1, 0xC7, 0x99, 0x3D, 0xA3, 0x4E, 0x02,
	0x29, 0xA7, 0x1E, 0x44, 0xF8, 0x0A, 0x4A, 0x20, 0xC5, 0xE9, 0x75, 0x7A, 0xE1, 0xEB, 0x11, 0x52,
	0xB9, 0x3B, 0xB2, 0x94, 0x9B, 0x0E, 0xF3, 0x33, 0x7B, 0x28, 0x19, 0xD8, 0xC2, 0x99, 0x14, 0x8B,
	0x7C, 0xA4, 0x52, 0x5E, 0x54, 0x23, 0x04, 0x5A, 0x4C, 0x38, 0x1A, 0x18, 0xD9, 0x4F, 0xFA, 0x94,
	0x72, 0x92, 0x20, 0xAF, 0x5A, 0xD7, 0x63, 0x28, 0xDC, 0xB0, 0x34, 0xC5, 0x50, 0x7A, 0x42, 0xD2,
	0xD4, 0xA3, 0xA3, 0x02, 0x2E, 0x06, 0x33, 0x4D, 0xDE, 0x9A, 0x0A, 0x9A, 0xD8, 0xBE, 0xED, 0x73,
	0xE2, 0x91, 0x0F, 0x4E, 0x86, 0x7C, 0xD0, 0x4E, 0x96, 0xE3, 0xB6, 0xE8, 0x9E, 0xD9, 0x70, 0xAE,
	0x28, 0x8A, 0x02, 0xD2, 0xD1, 0x87, 0x98, 0xB7, 0x50, 0xFD, 0xBE, 0x6D, 0x48, 0xE1, 0x5A, 0x0C,
	0xE4, 0xDD, 0x61, 0x0D, 0xB5, 0x35, 0x9E, 0xC6, 0x20, 0x9E, 0x24, 0x14, 0x0C, 0xA8, 0xF7, 0x57,
	0xCA, 0x4D, 0x29, 0xA0, 0x67, 0x3C, 0x7B, 0x2B, 0xF3, 0x13, 0x77, 0x6C, 0x8D, 0x34, 0xF7, 0x1D,
	0xA9, 0x6E, 0xF4, 0x96, 0xD8, 0x8D, 0xC4, 0xBC, 0x22, 0xE9, 0x36, 0xE6, 0xD1, 0x80, 0x97, 0x69,
	0x5D, 0x4E, 0x40, 0x1F, 0x9E, 0xCE, 0xCB, 0x13, 0xDB, 0x0E, 0x37, 0x78, 0xBF, 0x7E, 0xC1, 0x2E,
	0xE8, 0x0D, 0x44, 0xF9, 0x78, 0x3E, 0x75, 0xFF, 0x7A, 0x67, 0x84, 0x17, 0x4E, 0xFA, 0x50, 0x83,
	0x22, 0xEB, 0xB1, 0x3B, 0x6B, 0x50, 0xDB, 0xC0, 0xFE, 0xAE, 0x6A, 0x68, 0xB8, 0x8E, 0xFC, 0x9C,
	0x40, 0xDF, 0x55, 0x16, 0x0F, 0xC4, 0xDB, 0xB7, 0x11, 0xDF, 0x78, 0xF8, 0x20, 0xFE, 0x29, 0x50,
	0x05, 0x36, 0xCB, 0x77, 0x48, 0x5B, 0x7C, 0x5C, 0xF3, 0x3D, 0x7E, 0x74, 0x95, 0x78, 0x82, 0xF8,
	0x59, 0x2D, 0x55, 0x8A, 0x61, 0x6E, 0x81, 0x13, 0x46, 0x5B, 0x79, 0xCF, 0x5E, 0xC6, 0x92, 0x6D,
	0x5C, 0x3B, 0xE1, 0xA8, 0x08, 0x00, 0xA4, 0xF0, 0xFC, 0xBC, 0x4D, 0xCB, 0x20, 0x05, 0x25, 0xAA,
	0x25, 0x1F, 0x54, 0xD8, 0x52, 0x34, 0x20, 0xDB, 0x00, 0x68, 0x47, 0xC9, 0x91, 0xE2, 0x50, 0x55,
	0x87, 0x14, 0xB6, 0xB5, 0xE3, 0x68, 0x76, 0x7F, 0x5F, 0x6A, 0xA9, 0x38, 0x76, 0x26, 0x1D, 0x0F,
	0x85, 0x8D, 0x00, 0xC8, 0x11, 0x90, 0x9A, 0xA2, 0x20, 0xFB, 0x26, 0x09, 0xC1, 0x7C, 0xC7, 0xE3,
	0x71, 0x01, 0x88, 0x58, 0x6B, 0xDD, 0x99, 0xBC, 0x42, 0x74, 0x23, 0x26, 0xA3, 0xFE, 0xA7, 0xA9,
	0x7E, 0x3D, 0x3B, 0xBD, 0xCB, 0xBB, 0xF5, 0x14, 0x72, 0xE2, 0x62, 0x02, 0xB8, 0x89, 0x4D, 0x65,
	0x38, 0xE2, 0x76, 0xED
};

uint8_t pk_blob[276] = {
	0x06, 0x02, 0x00, 0x00, 0x00, 0xA4, 0x00, 0x00, 0x52, 0x53, 0x41, 0x31, 0x00, 0x08, 0x00, 0x00,
	0x01, 0x00, 0x01, 0x00, 0x79, 0x76, 0x68, 0xBD, 0x8A, 0x74, 0xA9, 0x59, 0x87, 0x9E, 0x4E, 0xCE,
	0xFD, 0xA7, 0x1E, 0x40, 0xBF, 0x41, 0xE3, 0x87, 0x1F, 0xB0, 0x9D, 0xDB, 0x80, 0xC4, 0xBA, 0x34,
	0x58, 0x41, 0xAC, 0xD6, 0x2C, 0xD9, 0x0A, 0x00, 0xB4, 0x83, 0x5E, 0x83, 0x6A, 0x00, 0x6C, 0x70,
	0x28, 0x6F, 0x93, 0xF6, 0x93, 0xEB, 0x6F, 0x00, 0xA3, 0xC1, 0x0F, 0xCA, 0x8C, 0x20, 0x18, 0xCF,
	0xF4, 0x62, 0x59, 0x9C, 0xE0, 0x02, 0xAB, 0x7F, 0xB4, 0xA2, 0x33, 0x88, 0x63, 0x28, 0x93, 0x07,
	0x65, 0x73, 0x6D, 0xA1, 0x96, 0x81, 0x4D, 0x18, 0xC6, 0xFA, 0x68, 0x1B, 0x44, 0xE5, 0x38, 0x51,
	0x0C, 0xEE, 0x38, 0xB7, 0x20, 0x78, 0x1E, 0x1A, 0xD1, 0x9F, 0x21, 0x8D, 0xB1, 0xEA, 0xB2, 0x7D,
	0xAD, 0x3C, 0x08, 0x23, 0x45, 0x89, 0x89, 0x29, 0x83, 0x69, 0xAD, 0xE4, 0x24, 0x84, 0x28, 0xAD,
	0x16, 0xDF, 0x5B, 0x99, 0xCC, 0x39, 0xFD, 0x51, 0xF3, 0xE4, 0xA1, 0x24, 0xE1, 0xB0, 0x7C, 0xFB,
	0x82, 0x36, 0x8B, 0x64, 0x2A, 0xE5, 0x64, 0xE3, 0x1F, 0x3A, 0x1F, 0xB2, 0x43, 0x33, 0x1D, 0xF2,
	0x84, 0x71, 0x83, 0xED, 0xF0, 0x5C, 0xBB, 0xF8, 0x6E, 0xF5, 0xB9, 0x51, 0x43, 0xA1, 0xC0, 0xCD,
	0xB2, 0x6D, 0x0F, 0xCD, 0x4C, 0x08, 0x92, 0xC7, 0xE3, 0xFA, 0x82, 0x1D, 0x90, 0x8D, 0x89, 0xBF,
	0x03, 0x4A, 0xED, 0xFE, 0x94, 0xE3, 0x64, 0x35, 0x4E, 0xA8, 0xCC, 0x44, 0x39, 0x98, 0xB4, 0x29,
	0x36, 0xA8, 0xED, 0x9A, 0x4C, 0x1B, 0x36, 0xBD, 0xB8, 0x6E, 0x73, 0x02, 0xFA, 0x50, 0xB4, 0x55,
	0x4F, 0x0D, 0x41, 0x04, 0xB1, 0xAF, 0xFD, 0xBD, 0x70, 0x0C, 0x1E, 0x13, 0x50, 0x47, 0x5C, 0x43,
	0x18, 0x85, 0xB0, 0xFF, 0x10, 0x40, 0xEF, 0x66, 0x62, 0x7B, 0xDD, 0x9D, 0x28, 0x1C, 0x63, 0xE5,
	0x43, 0x13, 0x0D, 0xF5
};

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // Parse the menu selections:
			switch (HIWORD(wParam))
			{
			case BN_CLICKED:
				switch (wmId)
				{
				case IDC_GENERATE_BUTTON:
					{
						RSA2048_KEY_BLOB privkey = { 0 };
						char* activate_code = NULL;
						char dev_info[1024] = {0, };
						char active_code[1024] = {0, };
						size_t devinfo_len = 0;
						//rsa2048_key_generate(&pubkey, &privkey);
						
						privkey.blob = sk_blob;
						privkey.blob_len = sizeof(sk_blob);
						devinfo_len = GetWindowTextA(ghReqEdit, dev_info, sizeof(dev_info) - 1);

						activate_code = crypto_keygen(dev_info, devinfo_len, &privkey);
						SetWindowTextA(ghActiEdit, activate_code);

						SAFE_FREE(activate_code);
					}
					break;
				case IDC_CHECK_BUTTON:
					{
						RSA2048_KEY_BLOB pubkey = { 0 };

						char* activate_code = NULL;
						char dev_info[1024] = { 0, };
						char active_code[1024] = { 0, };
						size_t devinfo_len = 0;

						pubkey.blob = pk_blob;
						pubkey.blob_len = sizeof(pk_blob);

						devinfo_len = GetWindowTextA(ghReqEdit, dev_info, sizeof(dev_info) - 1);
						active_code[GetWindowTextA(ghActiEdit, active_code, sizeof(active_code) - 1)] = '\0';

						if (activation_checkout(active_code, dev_info, devinfo_len, &pubkey))
							MessageBox(hWnd, _T("Activation code validation success!"), _T("Info"), MB_OK);
						else
							MessageBox(hWnd, _T("Activation code validation failed!"), _T("Error"), MB_OK);
					}
					break;
				}
				break;
			case EN_CHANGE:
				switch (wmId)
				{
				case IDC_REQUEST_EDIT:
					::PostMessage(hWnd, WM_COMMAND, MAKEWPARAM(IDC_GENERATE_BUTTON, BN_CLICKED), (LPARAM)ghGenBtn);
					break;
				}
				break;
			}
            switch (wmId)
            {
            case IDM_ABOUT:
                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);
            // TODO: Add any drawing code that uses hdc here...
            EndPaint(hWnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}
